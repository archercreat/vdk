# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include("cmake/cmkr.cmake" OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

# Options
option(VDK_BUILD_EXAMPLE "" OFF)

project(vdk
	LANGUAGES
		CXX
		ASM_MASM
	DESCRIPTION
		"vdk - vulnerable driver kit"
)

# Target ntdll
set(CMKR_TARGET ntdll)
set(ntdll_SOURCES "")

set(CMKR_SOURCES ${ntdll_SOURCES})
add_library(ntdll INTERFACE)

if(ntdll_SOURCES)
	target_sources(ntdll INTERFACE ${ntdll_SOURCES})
endif()

target_include_directories(ntdll INTERFACE
	"lib/ntdll"
)

target_link_directories(ntdll INTERFACE
	"lib/ntdll"
)

if(CMAKE_SIZEOF_VOID_P EQUAL 4) # x32
	target_link_libraries(ntdll INTERFACE
		ntdll_x86
	)
endif()

if(CMAKE_SIZEOF_VOID_P EQUAL 8) # x64
	target_link_libraries(ntdll INTERFACE
		ntdll_x64
	)
endif()

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target vdk
if(WIN32) # windows
	set(CMKR_TARGET vdk)
	set(vdk_SOURCES "")

	list(APPEND vdk_SOURCES
		"lib/vdk/map.cpp"
		"lib/vdk/msr.cpp"
		"lib/vdk/shared/drv.cpp"
		"lib/vdk/shared/mem.cpp"
		"lib/vdk/shared/pe.cpp"
		"lib/vdk/shared/phy.cpp"
		"lib/vdk/map.hpp"
		"lib/vdk/msr.hpp"
		"lib/vdk/shared/asserts.hpp"
		"lib/vdk/shared/drv.hpp"
		"lib/vdk/shared/mem.hpp"
		"lib/vdk/shared/pe.hpp"
		"lib/vdk/shared/phy.hpp"
		"lib/vdk/types.hpp"
		"lib/vdk/vdk.hpp"
		"lib/vdk/helpers.asm"
	)

	list(APPEND vdk_SOURCES
		cmake.toml
	)

	set(CMKR_SOURCES ${vdk_SOURCES})
	add_library(vdk STATIC)

	if(vdk_SOURCES)
		target_sources(vdk PRIVATE ${vdk_SOURCES})
	endif()

	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${vdk_SOURCES})

	target_compile_features(vdk PUBLIC
		cxx_std_20
	)

	target_compile_options(vdk PUBLIC
		"/MT"
		"/GS-"
	)

	target_include_directories(vdk PUBLIC
		"lib/ntdll"
		"lib/"
	)

	target_link_libraries(vdk PUBLIC
		ntdll
	)

	target_link_options(vdk PUBLIC
		"/INCREMENTAL:NO"
	)

	unset(CMKR_TARGET)
	unset(CMKR_SOURCES)
endif()

# Target example
if(VDK_BUILD_EXAMPLE) # build-example
	set(CMKR_TARGET example)
	include("cmake/msvc-static-runtime.cmake")

	set(example_SOURCES "")

	list(APPEND example_SOURCES
		"example/llaccess.cpp"
		"example/main.cpp"
		"example/speedfan.cpp"
		"example/llaccess.hpp"
		"example/speedfan.hpp"
	)

	list(APPEND example_SOURCES
		cmake.toml
	)

	set(CMKR_SOURCES ${example_SOURCES})
	add_executable(example)

	if(example_SOURCES)
		target_sources(example PRIVATE ${example_SOURCES})
	endif()

	get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
	if(NOT CMKR_VS_STARTUP_PROJECT)
		set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT example)
	endif()

	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${example_SOURCES})

	target_compile_features(example PRIVATE
		cxx_std_20
	)

	target_link_libraries(example PRIVATE
		vdk
	)

	target_link_options(example PRIVATE
		"/INCREMENTAL:NO"
	)

	unset(CMKR_TARGET)
	unset(CMKR_SOURCES)
endif()

